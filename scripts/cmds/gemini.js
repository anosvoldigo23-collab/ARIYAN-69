const g = require("fca-aryan-nix");
const axios = require("axios");
const apiURL = "http://65.109.80.126:20409/aryan/gemini";

// Fonction pour convertir le texte en caract√®res math√©matiques gras/script
function convertirEnMathChars(text) {
  const mapping = {
    "A":"ùê¥","B":"ùêµ","C":"ùê∂","D":"ùê∑","E":"ùê∏","F":"ùêπ","G":"ùê∫","H":"ùêª","I":"ùêº","J":"ùêΩ","K":"ùêæ","L":"ùêø","M":"ùëÄ","N":"ùëÅ","O":"ùëÇ","P":"ùëÉ","Q":"ùëÑ","R":"ùëÖ","S":"ùëÜ","T":"ùëá","U":"ùëà","V":"ùëâ","W":"ùëä","X":"ùëã","Y":"ùëå","Z":"ùëç",
    "a":"ùëé","b":"ùëè","c":"ùëê","d":"ùëë","e":"ùëí","f":"ùëì","g":"ùëî","h":"‚Ñé","i":"ùëñ","j":"ùëó","k":"ùëò","l":"ùëô","m":"ùëö","n":"ùëõ","o":"ùëú","p":"ùëù","q":"ùëû","r":"ùëü","s":"ùë†","t":"ùë°","u":"ùë¢","v":"ùë£","w":"ùë§","x":"ùë•","y":"ùë¶","z":"ùëß"
  };
  return text.split("").map(c => mapping[c] || c).join("");
}

module.exports = {
  config: {
    name: "gemini",
    aliases: ["ai", "chat"],
    version: "0.0.2",
    author: "Christus",
    countDown: 3,
    role: 0,
    shortDescription: "Pose une question √† Gemini AI",
    longDescription: "Discute avec Gemini via l'API mise √† jour par Christus",
    category: "AI",
    guide: "/gemini [ta question]"
  },

  onStart: async function({ api, event, args }) {
    const question = args.join(" ");
    if (!question) return api.sendMessage("‚ö† Veuillez poser une question.", event.threadID, event.messageID);

    api.setMessageReaction("‚è≥", event.messageID, () => {}, true);

    try {
      const response = await axios.get(`${apiURL}?prompt=${encodeURIComponent(question)}`);
      let answer = response.data?.response;
      if (!answer) throw new Error("Aucune r√©ponse re√ßue de l'API Gemini.");

      // Conversion en caract√®res math√©matiques
      answer = convertirEnMathChars(answer);

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

      const replyText = 
`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        QUESTION       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üí¨ ${question}

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        R√âPONSE        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
ü§ñ ${answer}`;

      api.sendMessage(replyText, event.threadID, (err, info) => {
        if (!info) return;
        global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID });
      }, event.messageID);

    } catch (err) {
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
      api.sendMessage("‚ö† Erreur lors de la r√©cup√©ration de la r√©ponse de Gemini.", event.threadID, event.messageID);
    }
  },

  onReply: async function({ api, event }) {
    if ([api.getCurrentUserID()].includes(event.senderID)) return;
    const question = event.body;
    if (!question) return;

    api.setMessageReaction("‚è≥", event.messageID, () => {}, true);

    try {
      const response = await axios.get(`${apiURL}?prompt=${encodeURIComponent(question)}`);
      let answer = response.data?.response;
      if (!answer) throw new Error("Aucune r√©ponse re√ßue de l'API Gemini.");

      answer = convertirEnMathChars(answer);

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

      const replyText = 
`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        QUESTION       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üí¨ ${question}

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        R√âPONSE        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
ü§ñ ${answer}`;

      api.sendMessage(replyText, event.threadID, (err, info) => {
        if (!info) return;
        global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID });
      }, event.messageID);

    } catch (err) {
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
      api.sendMessage("‚ö† Erreur lors de la r√©cup√©ration de la r√©ponse de Gemini.", event.threadID, event.messageID);
    }
  }
};

const wrapper = new g.GoatWrapper(module.exports);
wrapper.applyNoPrefix({ allowPrefix: true });
