const g = require("fca-aryan-nix"); // Importe la biblioth√®que fca-aryan-nix
const a = require("axios"); // Importe la biblioth√®que axios (pour faire des requ√™tes HTTP)
const u = "http://65.109.80.126:20409/aryan/gemini"; // D√©finit l'URL de l'API Gemini

module.exports = {
  config: {
    name: "gemini", // Nom de la commande
    aliases: ["ai","chat"], // Autres noms possibles pour la commande (alias)
    version: "0.0.1", // Version de la commande
    author: "Christus x Aesther", // Auteur de la commande
    countDown: 3, // D√©lai d'attente avant de pouvoir utiliser la commande √† nouveau (en secondes)
    role: 0, // Niveau de r√¥le requis pour utiliser la commande (0 = tout le monde)
    shortDescription: "Demande √† Gemini AI", // Br√®ve description de la commande
    longDescription: "Parlez avec Gemini en utilisant l'API mise √† jour par Christus", // Description d√©taill√©e de la commande
    category: "AI", // Cat√©gorie de la commande (pour l'organisation)
    guide: "/gemini [ta question]" // Instructions d'utilisation de la commande
  },

  onStart: async function({ api, event, args }) {
    // Fonction ex√©cut√©e lorsque la commande est appel√©e

    const p = args.join(" "); // R√©cup√®re les arguments pass√©s √† la commande et les assemble en une cha√Æne
    if (!p) return api.sendMessage("Pose ta question.", event.threadID, event.messageID); // Si aucune question n'est fournie, renvoie un message demandant une question

    api.setMessageReaction("üê±", event.messageID, () => {}, true); // Ajoute une r√©action "üê±" au message de l'utilisateur (optionnel)

    try {
      const r = await a.get(`${u}?prompt=${encodeURIComponent(p)}`); // Envoie une requ√™te GET √† l'API Gemini avec la question de l'utilisateur
      const reply = r.data?.response; // R√©cup√®re la r√©ponse de l'API

      if (!reply) throw new Error("Aucune r√©ponse de l'API Gemini."); // Si aucune r√©ponse n'est re√ßue, lance une erreur

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true); // Ajoute une r√©action "‚úÖ" au message de l'utilisateur (optionnel)

      api.sendMessage(reply, event.threadID, (err, i) => { // Envoie la r√©ponse de Gemini √† l'utilisateur
        if (!i) return;
        global.GoatBot.onReply.set(i.messageID, { commandName: this.config.name, author: event.senderID }); // Enregistre la commande et l'auteur pour une √©ventuelle r√©ponse ult√©rieure
      }, event.messageID);

    } catch (e) {
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true); // Ajoute une r√©action "‚ùå" au message de l'utilisateur (optionnel)
      api.sendMessage("‚ö† Probl√®me lors de la r√©cup√©ration de la r√©ponse de l'API Gemini.", event.threadID, event.messageID); // Envoie un message d'erreur si l'API ne r√©pond pas
    }
  },

  onReply: async function({ api, event, Reply }) {
    // Fonction ex√©cut√©e lorsqu'une r√©ponse est attendue √† un message pr√©c√©dent

    if ([api.getCurrentUserID()].includes(event.senderID)) return; // V√©rifie si l'auteur de la r√©ponse est le bot lui-m√™me, et si oui, s'arr√™te.
    const p = event.body; // R√©cup√®re le texte de la r√©ponse de l'utilisateur
    if (!p) return; // Si la r√©ponse est vide, s'arr√™te

    api.setMessageReaction("ü´©", event.messageID, () => {}, true); // Ajoute une r√©action "ü´©" au message de l'utilisateur (optionnel)

    try {
      const r = await a.get(`${u}?prompt=${encodeURIComponent(p)}`); // Envoie la r√©ponse de l'utilisateur √† l'API Gemini
      const reply = r.data?.response; // R√©cup√®re la r√©ponse de l'API

      if (!reply) throw new Error("aucune reponse de gemini API."); // S'il n'y a pas de r√©ponse, lance une erreur

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true); // Ajoute une r√©action "‚úÖ" au message de l'utilisateur (optionnel)

      api.sendMessage(reply, event.threadID, (err, i) => { // Envoie la r√©ponse de Gemini √† l'utilisateur
        if (!i) return;
        global.GoatBot.onReply.set(i.messageID, { commandName: this.config.name, author: event.senderID }); // Enregistre la commande et l'auteur pour une √©ventuelle r√©ponse ult√©rieure
      }, event.messageID);

    } catch (e) {
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true); // Ajoute une r√©action "‚ùå" au message de l'utilisateur (optionnel)
      api.sendMessage("‚ö† Erreur lors de la r√©ponse de l'API Gemini.", event.threadID, event.messageID); // Envoie un message d'erreur si l'API ne r√©pond pas
    }
  }
};

const w = new g.GoatWrapper(module.exports); // Cr√©e une instance de GoatWrapper (probablement pour g√©rer les commandes)
w.applyNoPrefix({ allowPrefix: true }); // Applique les param√®tres de la commande (probablement pour activer la commande sans pr√©fixe)