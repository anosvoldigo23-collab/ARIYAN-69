const axios = require("axios"); // Importe la biblioth√®que axios pour effectuer des requ√™tes HTTP.
const fs = require("fs"); // Importe la biblioth√®que fs pour manipuler le syst√®me de fichiers.
const path = require("path"); // Importe la biblioth√®que path pour g√©rer les chemins de fichiers.

module.exports = {
  config: {
    name: "shoti", // Nom de la commande.
    version: "1.2", // Version de la commande.
    author: "Christus x Aesther", // Auteur de la commande.
    countDown: 5, // D√©lai de refroidissement (en secondes) avant de pouvoir utiliser la commande √† nouveau.
    role: 0, // Niveau de r√¥le requis pour utiliser la commande (0 = tout le monde).
    shortDescription: {
      en: "R√©cup√©rer une vid√©o Shoti al√©atoire.",
    },
    longDescription: {
      en: "R√©cup√®re une courte vid√©o al√©atoire √† partir d'une nouvelle API et l'envoie dans le chat.",
    },
    category: "media", // Cat√©gorie de la commande (ex: media, fun, utilitaire...).
    guide: {
      en: "Utilisez cette commande pour r√©cup√©rer et partager une courte vid√©o al√©atoire.",
    },
  },

  onStart: async function ({ api, event }) {
    // Fonction qui s'ex√©cute lorsque la commande est appel√©e.

    const videoDir = path.join(__dirname, "cache"); // Cr√©e un chemin vers le dossier "cache" dans le m√™me dossier que le fichier de commande.
    const videoPath = path.join(videoDir, `shoti_${Date.now()}.mp4`); // Cr√©e un chemin vers un fichier vid√©o temporaire avec un nom unique.
    const apiUrl = "https://apis-top.vercel.app/aryan/shoti"; // URL de l'API pour r√©cup√©rer les vid√©os.

    try {
      if (!fs.existsSync(videoDir)) { // V√©rifie si le dossier "cache" existe.
        fs.mkdirSync(videoDir); // Si le dossier n'existe pas, il est cr√©√©.
      }

      const res = await axios.get(apiUrl); // Effectue une requ√™te GET √† l'API.
      const data = res.data; // R√©cup√®re les donn√©es de la r√©ponse.

      if (!data || !data.videoUrl) { // V√©rifie si les donn√©es ou l'URL de la vid√©o sont valides.
        return api.sendMessage("‚ùå √âchec de la r√©cup√©ration de la vid√©o Shoti. L'API est peut-√™tre en panne ou a renvoy√© une r√©ponse invalide.", event.threadID, event.messageID); // Envoie un message d'erreur si l'API ne retourne pas une vid√©o.
      }

      const { videoUrl, title, username, nickname, region } = data; // Extrait les informations de la vid√©o.

      const videoRes = await axios({ // Effectue une autre requ√™te pour t√©l√©charger la vid√©o.
        method: "GET",
        url: videoUrl,
        responseType: "stream", // Sp√©cifie que la r√©ponse doit √™tre trait√©e comme un flux de donn√©es.
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        }, // Ajoute un "User-Agent" pour simuler une requ√™te de navigateur.
      });

      const writer = fs.createWriteStream(videoPath); // Cr√©e un flux d'√©criture pour sauvegarder la vid√©o dans le fichier.

      videoRes.data.pipe(writer); // Transf√®re le flux de donn√©es de la r√©ponse de l'API vers le flux d'√©criture du fichier.

      writer.on("finish", () => {
        // Fonction qui s'ex√©cute lorsque l'√©criture du fichier est termin√©e.
        const caption = `üéÄ ùó¶ùóµùóºùòÅùó∂\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìù Titre: ${title || "Pas de titre"}\nüë§ Nom d'utilisateur: ${username || "N/A"}\nüí¨ Pseudo: ${nickname || "N/A"}\nüåç R√©gion: ${region || "Inconnu"}`;
         // Cr√©e la l√©gende pour la vid√©o.

        api.sendMessage(
          { body: caption, attachment: fs.createReadStream(videoPath) }, // Envoie un message avec la l√©gende et la vid√©o en pi√®ce jointe.
          event.threadID,
          () => fs.unlinkSync(videoPath), // Supprime le fichier vid√©o apr√®s l'envoi.
          event.messageID
        );
      });

      writer.on("error", (err) => {
        // Fonction qui s'ex√©cute en cas d'erreur lors de l'√©criture du fichier.
        console.error("‚ùå Erreur lors de l'√©criture du fichier vid√©o:", err); // Affiche l'erreur dans la console.
        api.sendMessage("‚ùå Erreur lors de l'enregistrement du fichier vid√©o.", event.threadID, event.messageID); // Envoie un message d'erreur √† l'utilisateur.
        if (fs.existsSync(videoPath)) { // V√©rifie si le fichier existe.
          fs.unlinkSync(videoPath); // Supprime le fichier si il existe.
        }
      });

    } catch (err) {
      // G√®re les erreurs globales (ex: probl√®mes de connexion).
      console.error("‚ùå Erreur:", err.message); // Affiche l'erreur dans la console.
      api.sendMessage("‚ùå Une erreur inattendue s'est produite lors de la r√©cup√©ration de la vid√©o Shoti. Veuillez r√©essayer plus tard.", event.threadID, event.messageID); // Envoie un message d'erreur √† l'utilisateur.
    }
  },
};