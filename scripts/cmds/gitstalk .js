const axios = require("axios");
const g = require("fca-aryan-nix"); // GoatWrapper pour noprefix

module.exports = {
  config: {
    name: "gitstalk",
    version: "1.0",
    author: "Christus x Aesther",
    countDown: 5,
    role: 0,
    usePrefix: false, // D√©sactive le pr√©fixe
    noPrefix: true,   // Activation noprefix
    shortDescription: { en: "Espionner un profil GitHub" },
    longDescription: { en: "R√©cup√®re les d√©tails d'un utilisateur GitHub (publics) en utilisant l'API d'Aryan." },
    category: "social",
    guide: { en: "{pn} <nom-d'utilisateur-github>\n\nExample:\n{pn} ntkhang03" }
  },

  onStart: async function({ api, args, event }) {
    if (!args[0]) return api.sendMessage("‚ùå Veuillez fournir un nom d'utilisateur GitHub.", event.threadID, event.messageID);

    const username = args[0];
    api.setMessageReaction("‚è≥", event.messageID, () => {}, true);

    try {
      const url = `https://aryanapi.up.railway.app/api/gitinfo?username=${encodeURIComponent(username)}`;
      const { data } = await axios.get(url);

      if (!data.status || !data.data) return api.sendMessage("‚ùå Impossible de r√©cup√©rer les informations du profil GitHub.", event.threadID, event.messageID);

      const u = data.data;
      const caption = `
üêô Espionnage de profil GitHub

üë§ Nom: ${u.name || "N/A"}
üîó Nom d'utilisateur: ${u.login}
üìù Bio: ${u.bio || "Pas de bio"}

üìÇ Repos publics: ${u.public_repos}
üìë Gists publics: ${u.public_gists}
üë• Abonn√©s: ${u.followers}
‚û°Ô∏è Suivi: ${u.following}

üìÖ Rejoint le: ${new Date(u.created_at).toLocaleDateString()}
‚ôªÔ∏è Derni√®re mise √† jour: ${new Date(u.updated_at).toLocaleDateString()}

üåç Blog: ${u.blog || "N/A"}
üê¶ Twitter: ${u.twitter_username || "N/A"}
üè¢ Entreprise: ${u.company || "N/A"}
üìç Lieu: ${u.location || "N/A"}

üîó Profil: ${u.html_url}

üëÄ Demand√© par: @${event.senderID}
`;

      api.sendMessage({
        body: caption,
        attachment: await getStreamFromURL(u.avatar_url)
      }, event.threadID, event.messageID);

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

    } catch (err) {
      console.error("‚ùå Erreur Gitstalk:", err.message);
      api.sendMessage("‚ùå √âchec de la r√©cup√©ration des informations du profil GitHub.", event.threadID, event.messageID);
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
    }
  }
};

async function getStreamFromURL(url) {
  const res = await axios({ url, responseType: "stream" });
  return res.data;
}

// Activation noprefix via GoatWrapper
const wrapper = new g.GoatWrapper(module.exports);
wrapper.applyNoPrefix({ allowPrefix: false });
