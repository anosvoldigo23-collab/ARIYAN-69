const a = require("axios"); // Importe la biblioth√®que pour effectuer des requ√™tes HTTP.
const b = require("fs"); // Importe la biblioth√®que pour interagir avec le syst√®me de fichiers (lecture/√©criture de fichiers).
const c = require("path"); // Importe la biblioth√®que pour manipuler les chemins de fichiers et de dossiers.
const d = require("yt-search"); // Importe la biblioth√®que pour rechercher des vid√©os YouTube.

module.exports = {
  config: {
    name: "sing", // Nom de la commande (√† utiliser pour l'appeler).
    aliases: ["music", "song"], // Autres noms possibles pour la commande (synonymes).
    version: "0.0.1", // Version de la commande.
    author: "Christus x Aesther", // Auteur de la commande.
    countDown: 5, // D√©lai d'attente en secondes entre les utilisations de la commande.
    role: 0, // Niveau de r√¥le requis pour utiliser la commande (0 = tout le monde).
    shortDescription: "Chante pour faire du th√©", // Br√®ve description de la commande.
    longDescription: "Recherche et t√©l√©charge de la musique depuis YouTube", // Description d√©taill√©e de la commande.
    category: "MUSIC", // Cat√©gorie de la commande (pour l'organisation).
    guide: "/music <nom de la chanson ou URL YouTube>" // Instructions d'utilisation de la commande.
  },

  onStart: async function ({ api: e, event: f, args: g }) {
    // Fonction qui s'ex√©cute lorsque la commande est appel√©e.

    if (!g.length) return e.sendMessage("‚ùå Veuillez fournir le nom d'une chanson ou une URL YouTube.", f.threadID, f.messageID);
    // Si aucun argument n'est fourni, envoie un message d'erreur.

    let h = g.join(" "); // Combine les arguments en une cha√Æne de caract√®res (nom de la chanson ou URL).
    const i = await e.sendMessage("üéµ Patience, je recherche...", f.threadID, null, f.messageID);
    // Envoie un message pour informer l'utilisateur de la recherche en cours.

    try {
      let j; // Variable pour stocker l'URL de la vid√©o YouTube.
      if (h.startsWith("http")) {
        // Si l'entr√©e commence par "http", on suppose que c'est une URL.
        j = h; // Utilise l'URL fournie directement.
      } else {
        // Sinon, on effectue une recherche sur YouTube.
        const k = await d(h); // Recherche la chanson avec la biblioth√®que yt-search.
        if (!k || !k.videos.length) throw new Error("Aucun r√©sultat trouv√©."); // Si aucun r√©sultat n'est trouv√©, l√®ve une erreur.
        j = k.videos[0].url; // Prend l'URL de la premi√®re vid√©o trouv√©e.
      }

      const l = `http://65.109.80.126:20409/aryan/play?url=${encodeURIComponent(j)}`;
      // Construit l'URL d'une API externe pour r√©cup√©rer le lien de t√©l√©chargement.
      const m = await a.get(l); // Effectue une requ√™te HTTP vers l'API.
      const n = m.data; // R√©cup√®re les donn√©es de la r√©ponse de l'API.

      if (!n.status || !n.downloadUrl) throw new Error("L'API n'a pas renvoy√© l'URL de t√©l√©chargement."); // V√©rifie si l'API a r√©ussi.

      const o = `${n.title}.mp3`.replace(/[\\/:"*?<>|]/g, ""); // Cr√©e le nom du fichier MP3 en utilisant le titre de la chanson.  Nettoie le titre des caract√®res invalides.
      const p = c.join(__dirname, o); // Cr√©e le chemin complet du fichier MP3 sur le serveur.

      const q = await a.get(n.downloadUrl, { responseType: "arraybuffer" }); // Effectue une requ√™te pour t√©l√©charger le fichier MP3.
      b.writeFileSync(p, q.data); // √âcrit les donn√©es du fichier MP3 dans le fichier local.

      await e.sendMessage(
        { attachment: b.createReadStream(p), body: `üéµ ùó†ùó®ùó¶ùóúùó§ùó®ùóò\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${n.title}` }, // Envoie le fichier MP3 en tant qu'attachement.
        f.threadID,
        () => {
          b.unlinkSync(p); // Supprime le fichier MP3 local apr√®s l'envoi.
          e.unsendMessage(i.messageID); // Supprime le message de recherche.
        },
        f.messageID
      );

    } catch (r) {
      // G√®re les erreurs √©ventuelles.
      console.error(r); // Affiche l'erreur dans la console.
      e.sendMessage(`‚ùå √âchec du t√©l√©chargement de la chanson: ${r.message}`, f.threadID, f.messageID); // Envoie un message d'erreur √† l'utilisateur.
      e.unsendMessage(i.messageID); // Supprime le message de recherche.
    }
  }
};